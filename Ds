/*1.Array operations */
#include<stdio.h>
#define maxsize 10
int a[maxsize],n,i,ele,pos;
int create()
{
printf("enter the no of elements\n");
scanf("%d",&n);
printf("enter %d elements",n);
for(i=0;i<n;i++)
scanf("%d",&a[i]);
}
int display()
{
if(n==0)
{
printf("array is empty");
return;
}
else
{
printf("array elements are\n");
for(i=0;i<n;i++)
printf("%d \t",a[i]);
}
}
int insert()
{
if (n==maxsize)
{
printf("array is full");
return;
}
else
{
printf("enter the element to be inserted");
scanf("%d",&ele);
printf("enter the valid positon");
scanf("%d",&pos);
for(i=n-1;i>=pos-i;i--)
{
a[i+1]=a[i];
}
a[pos-1]=ele;
n++;
}
}
int del()
{
if(n==0)
{
printf("array is empty");
return;
}
else
{
printf("enter the position of elements to be deleted\n");
scanf("%d",&pos);
ele=a[pos-1];
for(i=pos-1;i<n-1;i++)
{
a[i]=a[i+1];
}
n--;
printf("the deleted elementes is %d",ele);
}
}
void main()
{
int ch;
while(1)
{
printf("---------------menu--------------\n");
printf("1--->create\n");
printf("2-->display\n");
printf("3-->insert\n");
printf("4-->delete\n");
printf("5--->exit\n");
printf("enter choice");
scanf("%d",&ch);
switch(ch)
{
case 1: create();
break;
case 2: display();
break;
case 3:insert();
break;
case 4:del();
break;
case 5:exit(0);
default:printf("enter the valid choice");
break;
}
}
}
/* 2.String Matching */
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void stringmatch(char str[100],char pat[50],char rep[50])
{
int i=0,m=0,c=0,j=0,k=0,flag=0;
char ans[50];
while(str[c]!='\0')
{
if(str[m]==pat[i])
{
i++;
m++;
if(pat[i]=='\0')
{
flag=1;
for(k=0;rep[k]!='\0';k++,j++)
ans[j]=rep[k];
i=0;
c=m;
}
}
else
{
ans[j]=str[c];
j++;
c++;
m=c;i=0;
}
}
ans[j]='\0';
if(flag==1)
printf("\n The resultant string is \n %s",ans);
else
printf("\n Pattern string NOT found \n");
}
void readstring(char str[],char pat[],char rep[])
{
printf("\n Enter a main string \n");
gets(str);
printf("\n Enter a pattern string \n");
gets(pat);
printf("\n Enter a replace string \n");
gets(rep);
}
void main()
{
char str[100],pat[50],rep[50];
readstring(str,pat,rep);
stringmatch(str,pat,rep);
}
/*3.Stack Operations */
#include<stdio.h>
#include<stdlib.h>
#define maxsize 4
int push(int s[],int *top) 
{
int ele;
if(*top==(maxsize-1))
{
printf("\n\nstack is overflow");
return;
}
else
{
printf("\n enter a element to be pushed :");
scanf("%d",&ele);
s[++(*top)]=ele;
}
}
int pop(int s[],int *top)
{
int ele;
ele=s[(*top)--];
return ele;
}
void palindrome(int v[],int top)
{
int flag=0,i;
for(i=0;i<(top+1);i++)
{
if(v[i]==pop(v,&top))
flag=1;
else
{
flag=0;
break;
}
}
if(flag)
printf("stack contents are palindrome");
else
printf("stack contents are not palindrome");
}
void display(int s[],int top)
{
int i;
if(top==-1)
{
printf("\n stack is empty");
return;
}
else
{printf("\n the stack contents are");
for(i=top;i>=0;i--)
{
printf("\n[%d]",s[i]);
printf("\n");
}
}
}
void main()
{
int s[maxsize],ele;
int ch,top=-1;
while(1)
{
printf("\n----------->MAIN MENU<----------\n");
printf("\n1---------->PUSH into the stack<------");
printf("\n2---------->POP from the stack<------");
printf("\n3---------->PALINDROME check using stack<----");
printf("\n4----------> DISPLAY<-----------");
printf("\n5---------->EXIT<------");
printf("\n enter your choice:");
scanf("%d",&ch);
switch(ch)
{
case 1:push(s,&top);
 display(s,top);
 break;
case 2:if(top==-1)
{
 printf("\n stack under flow");
}
else
{
 ele=pop(s,&top);
 printf("\n popped element is %d",ele);
 }
break;
case 3:palindrome (s,top);
 break;
case 4:display(s,top);
 break;
case 5:exit(0);
 break;
 default:printf("\n enter a valid choice");
break;
}
}
}